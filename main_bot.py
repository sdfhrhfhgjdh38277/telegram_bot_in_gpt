#  import, token to bot
import g4f
import logging
import telebot as tele
from time import time
import configure as cfg

bot = tele.TeleBot(cfg.config["token"])
logging.basicConfig(filename="py_log.log", filemode="w")


@bot.message_handler(commands=["start"])
def start(message):
    markup = types.InlineKeyboardMarkup()
    contact_btn = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º", url="https://t.me/python_tor")
    markup.add(contact_btn)
    # hello message
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å - –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑–æ–∞–±–æ—Ç—á–∏–∫–æ–º", reply_markup=markup)


@bot.message_handler(commands=["search"])
def ask_gpt(message):
    # send waiting message
    msg_wait = bot.send_message(
        message.chat.id, "–¢–∞–∞–∞–∫, –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ... —Å–µ–π—á–∞—Å –Ω–∞—à–∞–º–∞–Ω—é –æ—Ç–≤–µ—ÇüïäÔ∏è"
    )
    msg_id = msg_wait.id
    # create generate model, and send generated message to user
    start_time = time()
    response = ChatCompletion.create(
        model=gemini_pro,
        messages=[{"role": "user", "content": message.text}],
    )
    bot.delete_message(message.chat.id, msg_id)
    bot_response = bot.reply_to(message, response)
    end_time = time()
    all_need_time = round(end_time - start_time, 2)
    print(f"Request generated in: {all_need_time}")
    
    
# Bot news
@bot.message_handler(commands=['news'])
def bot_new(message):
    bot.send_message(message.chat.id, 
    "–í–µ—Ä—Å–∏—è 0.5: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–∏–∫–∏–ø–µ–¥–∏—é (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥)")


if __name__ == "__main__":
   logging.basicConfig(level=logging.INFO)  # start loogging bot
    # start polling to bot work
    bot.infinity_polling()
